
name: Java App CI/CD Pipeline

on:
  push:
    branches: [ main ] # Triggers on pushes to the 'main' branch
  workflow_dispatch: # Allows manual trigger from GitHub UI

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 8 for testing
        # Install JDK on the runner, needed for Maven commands
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin' # Recommended distribution
          cache: 'maven'       # Cache Maven dependencies for faster installs    

      - name: Compile and Install Dependencies (without running tests)
        # This step compiles the code and installs dependencies to the local Maven repo.
        # We skip tests here to ensure the build artifact is ready for testing.
        run: mvn -B clean install -DskipTests --file pom.xml

      - name: Run Unit and Integration Tests
        # This is a dedicated step for running tests.
        # The pipeline will fail here if any tests do not pass.
        run: mvn -B test --file pom.xml

  build_and_deploy:
    name: Build Docker Image and Deploy to EC2
    needs: test # This job will only run if the 'test' job succeeds
    runs-on: ubuntu-latest
    # This condition ensures deployment only happens on push or manual trigger, not other events like PRs
    if: github.event_name == 'push' || github.event.name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Java Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # '.' means the Dockerfile and source code are in the root of the repo
          push: true
          # Replace 'your_dockerhub_username' with your actual Docker Hub username
          # 'java-springboot-app' should be the name you want for your Docker image
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/java-springboot-app:latest
          # Use GitHub Actions cache for Docker builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64 # Specify platform (e.g., linux/amd64 for Intel/AMD EC2)

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0 # IMPORTANT: Use a specific version like v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}

          script: |
            # Define the application directory on your EC2 instance
            # This path is where your docker-compose.yaml will be created and managed
            APP_DIR="/home/${{ secrets.SERVER_USERNAME }}/java-springboot-app"

            # Create the directory if it doesn't exist and ensure proper ownership
            if [ ! -d "$APP_DIR" ]; then
              mkdir -p "$APP_DIR"
              # Ensure the directory is owned by the SSH user for proper permissions
              sudo chown -R ${{ secrets.SERVER_USERNAME }}:${{ secrets.SERVER_USERNAME }} "$APP_DIR"
            fi
            cd "$APP_DIR"

            # Create/Update the docker-compose.yaml file on the EC2 instance dynamically
            # This allows you to define your service configuration directly in the pipeline
            cat <<EOF > docker-compose.yaml
            services:
              java_app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/java-springboot-app:latest
                container_name: java_app_container
                restart: always
                ports:
                  - "8080:8080" # Map host port 8080 to container port 8080 (default for Spring Boot)
                environment:
                  SPRING_PROFILES_ACTIVE: production
                  # Add any other environment variables your Java app needs at runtime
                  # For example: JAVA_TOOL_OPTIONS: "-XX:+ExitOnOutOfMemoryError"
            EOF

            # Log in to Docker Hub on the EC2 instance before pulling the image
            # This is crucial if your image is private or if Docker Hub rate limits apply
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Pull the latest Docker image for the Java app using docker compose
            echo "Pulling latest Java image..."
            docker compose pull java_app

            # Stop and remove existing containers, then start new ones with the latest image
            # --force-recreate ensures a fresh start even if the container config hasn't changed
            echo "Starting Java application..."
            docker compose up -d --force-recreate

            # Clean up old Docker images to save disk space on EC2
            echo "Cleaning up old Docker images..."
            docker image prune -f

            echo "Deployment successful for Java app!"
